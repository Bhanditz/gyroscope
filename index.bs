<pre class="metadata">
Title: Gyroscope Sensor
Status: ED
Level: 1
ED: https://w3c.github.io/gyroscope/
Shortname: gyroscope
TR: http://www.w3.org/TR/gyroscope/
Editor: Anssi Kostiainen 41974, Intel Corporation, http://intel.com/
Editor: Mikhail Pozdnyakov 78325, Intel Corporation, http://intel.com/
Group: dap
Abstract:
  This specification defines a concrete sensor interface to monitor
  the rate of rotation around the device's local three primary axes.
Version History: https://github.com/w3c/gyroscope/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/gyroscope/issues/new">via the w3c/gyroscope repository on GitHub</a>
Indent: 2
Repository: w3c/gyroscope
Markup Shorthands: markdown on
Inline Github Issues: true
!Test Suite: <a href="https://github.com/w3c/web-platform-tests/tree/master/gyroscope">web-platform-tests on GitHub</a>
Boilerplate: omit issues-index, omit conformance
Default Biblio Status: current
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/permissions/; spec: PERMISSIONS
  type: dfn
    text: permission; url: idl-def-Permission
    text: associated PermissionDescriptor;  url: dfn-associated-permissiondescriptor
urlPrefix: https://w3c.github.io/sensors; spec: GENERIC-SENSOR
  type: dfn
    text: high-level
    text: sensor subclass
    text: sensorreading subclass
    text: default sensor
    text: supported reporting mode; url: supported-reporting-modes
    text: auto 
    text: construct a sensor object; url: construct-sensor-object
</pre>

Introduction {#intro}
============

The Gyroscope Sensor extends the Generic Sensor API [[GENERIC-SENSOR]]
to provide information about the angular velocity around the device's local X, Y and Z axis 
in terms of radian per seconds units.


Examples {#examples}
========

<div class="example">
    <pre highlight="js">
    let sensor = new GyroscopeSensor();
    sensor.start();
    
    sensor.onchange = event => {
        console.log("Rotation rate around the X-axis " + event.reading.rotationRateX);
        console.log("Rotation rate around the Y-axis " + event.reading.rotationRateY);
        console.log("Rotation rate around the Z-axis " + event.reading.rotationRateZ);
    };

    sensor.onerror = event => console.log(event.error.name, event.error.message);
    </pre>
</div>

Security and Privacy Considerations {#security-and-privacy}
===================================

There are no specific security and privacy considerations
beyond those described in the Generic Sensor API [[!GENERIC-SENSOR]].

Model {#model}
=====

The Gyroscope Sensor's associated <a>Sensor subclass</a>
is the {{GyroscopeSensor}} class.

The Gyroscope Sensor's associated <a>SensorReading subclass</a>
is the {{GyroscopeSensorReading}} class.

The Gyroscope Sensor has a <a>default sensor</a>,
which is the device's main gyroscope sensor.

The Gyroscope Sensor has a single <a>supported reporting mode</a>
which is "<a>auto</a>".

The Gyroscope Sensor's <a>permission</a> name is `"gyroscope"`.
It has no <a>associated PermissionDescriptor</a>.

The Gyroscope Sensor has an associated abstract operation
to <dfn>retrieve the sensor permission</dfn> which
must simply return a <a>permission</a> whose name is "gyroscope".

The Gyroscope Sensor has an associated abstract operation
to <dfn lt="Construct SensorReading Object">construct a SensorReading object</dfn>
which creates a new {{GyroscopeSensorReading}} object and sets each of its
<a attribute for="GyroscopeSensorReading">rotationRateX</a>
<a attribute for="GyroscopeSensorReading">rotationRateY</a> and
<a attribute for="GyroscopeSensorReading">rotationRateZ</a> attributes to
the <a>current angular velocity</a> about the corresponding axis.

The <dfn>current angular velocity</dfn> is the rate at which the device rotates
about a specified axis. Its unit is the radian per second (rad/s) [[SI]].

The sign of the <a>current angular velocity</a> depends on the rotation direction and
it must be according to the right-hand convention, such that positive rotation around
an axis is clockwise when viewed along the positive direction of the axis (see figure below).

<img src="gyroscope_sensor_coordinate_system.png" srcset="gyroscope_sensor_coordinate_system.svg" alt="Device's local coordinate system and rotation.">


API {#api}
===

The GyroscopeSensor Interface {#gyroscope-sensor-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional SensorOptions sensorOptions)]
  interface GyroscopeSensor : Sensor {
    readonly attribute GyroscopeSensorReading? reading;
  };
</pre>

To <dfn>Construct an GyroscopeSensor Object</dfn> the user agent must invoke the 
<a>construct a Sensor object</a> abstract operation.

The GyroscopeSensorReading Interface {#gyroscope-sensor-reading-interface}
---------------------------------------

<pre class="idl">
  [Constructor(GyroscopeSensorReadingInit GyroscopeSensorReadingInit)]
  interface GyroscopeSensorReading : SensorReading {
      readonly attribute unrestricted double rotationRateX;
      readonly attribute unrestricted double rotationRateY;
      readonly attribute unrestricted double rotationRateZ;
  };
  
  dictionary GyroscopeSensorReadingInit {
      unrestricted double rotationRateX = 0;
      unrestricted double rotationRateY = 0;
      unrestricted double rotationRateZ = 0;
  };
</pre>

### The GyroscopeSensorReading constructor ### {#gyroscope-sensor-reading-constructor}

### The attribute ### {#gyroscope-sensor-reading-attribute}

The <a attribute for="GyroscopeSensorReading">rotationRateX</a> attribute of the {{GyroscopeSensorReading}}
interface represents the <a>current angular velocity</a> around X-axis.

The <a attribute for="GyroscopeSensorReading">rotationRateY</a> attribute of the {{GyroscopeSensorReading}}
interface represents the <a>current angular velocity</a> around Y-axis.

The <a attribute for="GyroscopeSensorReading">rotationRateX</a> attribute of the {{GyroscopeSensorReading}}
interface represents the <a>current angular velocity</a> around Z-axis.

Acknowledgements {#acknowledgements}
================

Tobie Langel for the work on Generic Sensor API.

<h2 id="conformance" class="no-ref no-num">Conformance</h2>

 <h3 id="conventions" class="no-ref no-num">Document conventions</h3>

     <p>Conformance requirements are expressed with a combination of
     descriptive assertions and RFC 2119 terminology. The key words "MUST",
     "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
     "RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
     document are to be interpreted as described in RFC 2119.
     However, for readability, these words do not appear in all uppercase
     letters in this specification.

     <p>All of the text of this specification is normative except sections
     explicitly marked as non-normative, examples, and notes. [[!RFC2119]]</p>

 <h3 id="conformance-classes" class="no-ref no-num">Conformance Classes</h3>

     <p>A <dfn>conformant user agent</dfn> must implement all the requirements
     listed in this specification that are applicable to user agents.</p>
